import matplotlib.pyplot as plt
import numpy as np
import sys, os
import scipy.special as sci
import datetime

t0 = datetime.datetime.now()
R  = input('Base ring (QQ, ZZ, or ZZ/p for the finite field ZZ/pZZ): ')
n = int(input('Number of variables: '))
d = int(input('Degree of generators: '))
# g = int(input('Number of generators: '))
rep = int(input('Number of repetitions: '))
rR = R.replace('/','_')

g = 2
while g < sci.binom(n, d):
    t1 = datetime.datetime.now()
    f = open('generate_polynomials_equi.m2', 'w+')
    f.write('restart \n')
    f.write('loadPackage \"RandomIdeals\" \n')
    f.write(f'R = %s; \n' %(R))
    f.write(f'rR = \"%s\"; \n' %(rR))
    f.write(f'var = %s; \n' %(n))
    f.write(f'd = %s; \n' %(d))
    f.write(f'g = %s; \n' %(g))
    f.write(f'rep = %s; \n' %(rep))
    f.write(f'S = R[x_1..x_%s]; \n ' %(n))
    f.write('f = randomSquareFreeMonomialIdeal; \n')
    f.write('everyRoot = [] \n')
    f.write('for i to rep do { \n')
    f.write('   I = f((g:d), S); \n')
    f.write('   p = hilbertPolynomial(coker gens I, Projective => false); \n')
    f.write('   everyRoot = append(everyRoot, roots p); \n')
    f.write('} \n')
    f.write("file = concatenate(\"./roots_equi/\", rR, \"/var\", toString(var), \"_deg\", toString(d), \"_gens\", toString(g), \"_rep\", toString(rep)) \n")
    f.write('for i to rep do { \n')
    f.write('   for j to #everyRoot_i -1 do { \n')
    f.write('       file << concatenate(toString(realPart everyRoot_i_j), \", \", toString(imaginaryPart everyRoot_i_j)) << endl; \n')
    f.write('   } \n')
    f.write('} \n')
    # f.write('   file << everyRoot_i << endl; \n')
    f.write('file << close; \n')
    f.write('exit()')
    f.close()

    os.system('M2 generate_polynomials_equi.m2')

    arq = open('./roots_equi/' + rR + '/var' + str(n) + '_deg' + str(d) + '_gens' + str(g) + '_rep' + str(rep))
    roots = arq.read().split('\n')
    roots = [r.split(', ') for r in roots]
    roots = roots[:-1]

    for r in roots:
        r[0] = float(r[0])
        r[1] = float(r[1])

    roots = np.array(roots)
    roots = np.transpose(roots)

    plt.figure(figsize=(10,5))
    if rR == 'QQ':
        plt.title('Complex roots of Hilbert polynomials of squarefree monomial ideals \n generated by ' + str(g) + ' monomials of degree ' + str(d) + ' in ' + str(n) + ' variables' + r' over $\mathbb{Q}$')
    plt.plot(roots[0], roots[1], '.', alpha=0.1)
    plt.savefig(f'graphs_equi/%s/var%s/deg%s/gens%s_rep%s.png' %(rR, n, d, g, rep))
    plt.show()
    g += 1
    t2 = datetime.datetime.now()
    print(g, sci.binom(n, d), t2 - t1)
    
t3 = datetime.datetime.now()
print(t3-t0)

