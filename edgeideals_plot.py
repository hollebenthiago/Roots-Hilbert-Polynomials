import matplotlib.pyplot as plt
import numpy as np
import scipy.special as sci

R  = input('Base ring (QQ, ZZ, or ZZ/p for the finite field ZZ/pZZ): ')
n = int(input('Number of variables: '))
# d = int(input('Degree of generators: '))
# rep = int(input('Number of repetitions: '))
rR = R.replace('/','_')
g = 2



arq = open('./roots_edgeIdeals_V/' + rR + '/' + str(n) + 'vertices')
roots = arq.read().split('\n')
roots = [r.split(', ') for r in roots]
roots = roots[:-1]
for r in roots:
    r[0] = float(r[0])
    r[1] = float(r[1])
roots = np.array(roots)
roots = np.transpose(roots)
ymax = np.argmax(roots[1])
xmax = np.argmax(roots[0])
plt.figure(figsize=(10,5))
if rR == 'QQ':
    plt.title('Complex roots of Hilbert polynomials of edge ideals \n' + ' in ' + str(n) + ' variables' + r' over $\mathbb{Q}$')
plt.plot(roots[0], roots[1], '.', markersize = 1)
a,b = plt.ylim()
plt.xlim(a,b)
plt.savefig(f'edgeideals_plots/V/%s/%svertices.png' %(rR, n))
plt.show()
print(roots[0][1271], roots[1][1271])
# while g < sci.binom(n, d):
#     arq = open('./roots_equi/' + rR + '/var' + str(n) + '_deg' + str(d) + '_gens' + str(g) + '_rep' + str(rep))


#     roots = np.array(roots)
#     roots = np.transpose(roots)
#     ymax = max(roots[1])
#     plt.figure(figsize=(10,5))
#     if rR == 'QQ':
#         plt.title('Complex roots of Hilbert polynomials of squarefree monomial ideals \n generated by ' + str(g) + ' monomials of degree ' + str(d) + ' in ' + str(n) + ' variables' + r' over $\mathbb{Q}$')
#     plt.plot(roots[0], roots[1], '.', alpha=0.1)
#     a,b = plt.ylim()
#     plt.xlim(a,b)
#     plt.savefig(f'graphs_equi/%s/var%s/deg%s/complex_roots/gens%s_rep%s.png' %(rR, n, d, g, rep))
#     plt.show()
#     g += 1